CREATE TABLE [dbo].[SYS_JOB_TASKLIST_LOG] (
    [ID]                BIGINT         IDENTITY (1, 1) NOT NULL,
    [JOB_TASKLIST_CODE] NVARCHAR (50)  NOT NULL,
    [STATUS]            NVARCHAR (20)  NOT NULL,
    [START_DATE]        DATETIME       NOT NULL,
    [END_DATE]          DATETIME       NOT NULL,
    [LOG_DESCRIPTION]   NVARCHAR (400) NOT NULL,
    [RUN_BY]            NVARCHAR (20)  NOT NULL,
    [FROM_ID]           BIGINT         NOT NULL,
    [TO_ID]             BIGINT         NOT NULL,
    [NUMBER_OF_ROWS]    INT            NOT NULL,
    [CRE_DATE]          DATETIME       NOT NULL,
    [CRE_BY]            NVARCHAR (15)  NOT NULL,
    [CRE_IP_ADDRESS]    NVARCHAR (15)  NOT NULL,
    [MOD_DATE]          DATETIME       NOT NULL,
    [MOD_BY]            NVARCHAR (15)  NOT NULL,
    [MOD_IP_ADDRESS]    NVARCHAR (15)  NOT NULL
);


GO
    
			CREATE TRIGGER [dbo].[SYS_JOB_TASKLIST_LOG_Insert_Audit] 
			ON [dbo].[SYS_JOB_TASKLIST_LOG]    
			FOR INSERT    
			AS    
			
 INSERT INTO [dbo].[Z_AUDIT_SYS_JOB_TASKLIST_LOG]
([ID],[JOB_TASKLIST_CODE],[STATUS],[START_DATE],[END_DATE],[LOG_DESCRIPTION],[RUN_BY],[FROM_ID],[TO_ID],[NUMBER_OF_ROWS],[CRE_DATE],[CRE_BY],[CRE_IP_ADDRESS],[MOD_DATE],[MOD_BY],[MOD_IP_ADDRESS],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[ID]) as [ID],[JOB_TASKLIST_CODE],[STATUS],[START_DATE],[END_DATE],[LOG_DESCRIPTION],[RUN_BY],[FROM_ID],[TO_ID],[NUMBER_OF_ROWS],[CRE_DATE],[CRE_BY],[CRE_IP_ADDRESS],[MOD_DATE],[MOD_BY],[MOD_IP_ADDRESS],'New','Insert',SUSER_SNAME(),getdate(),''  FROM INSERTED 
GO
    
			CREATE TRIGGER [dbo].[SYS_JOB_TASKLIST_LOG_Update_Audit]      
			ON [dbo].[SYS_JOB_TASKLIST_LOG]    
			FOR UPDATE    
			AS 
   
			 
			    DECLARE @UpdatedCols varchar(max) 
			 
			   SELECT @UpdatedCols =  CASE WHEN UPDATE([ID]) THEN '[ID]-' ELSE '' END + 
CASE WHEN UPDATE([JOB_TASKLIST_CODE]) THEN '[JOB_TASKLIST_CODE]-' ELSE '' END + 
CASE WHEN UPDATE([STATUS]) THEN '[STATUS]-' ELSE '' END + 
CASE WHEN UPDATE([START_DATE]) THEN '[START_DATE]-' ELSE '' END + 
CASE WHEN UPDATE([END_DATE]) THEN '[END_DATE]-' ELSE '' END + 
CASE WHEN UPDATE([LOG_DESCRIPTION]) THEN '[LOG_DESCRIPTION]-' ELSE '' END + 
CASE WHEN UPDATE([RUN_BY]) THEN '[RUN_BY]-' ELSE '' END + 
CASE WHEN UPDATE([FROM_ID]) THEN '[FROM_ID]-' ELSE '' END + 
CASE WHEN UPDATE([TO_ID]) THEN '[TO_ID]-' ELSE '' END + 
CASE WHEN UPDATE([NUMBER_OF_ROWS]) THEN '[NUMBER_OF_ROWS]-' ELSE '' END + 
CASE WHEN UPDATE([CRE_DATE]) THEN '[CRE_DATE]-' ELSE '' END + 
CASE WHEN UPDATE([CRE_BY]) THEN '[CRE_BY]-' ELSE '' END + 
CASE WHEN UPDATE([CRE_IP_ADDRESS]) THEN '[CRE_IP_ADDRESS]-' ELSE '' END + 
CASE WHEN UPDATE([MOD_DATE]) THEN '[MOD_DATE]-' ELSE '' END + 
CASE WHEN UPDATE([MOD_BY]) THEN '[MOD_BY]-' ELSE '' END + 
CASE WHEN UPDATE([MOD_IP_ADDRESS]) THEN '[MOD_IP_ADDRESS]-' ELSE '' END  
			    
			   IF LTRIM(RTRIM(@UpdatedCols)) <> '' 
			   BEGIN 
			          INSERT INTO [dbo].[Z_AUDIT_SYS_JOB_TASKLIST_LOG]
([ID],[JOB_TASKLIST_CODE],[STATUS],[START_DATE],[END_DATE],[LOG_DESCRIPTION],[RUN_BY],[FROM_ID],[TO_ID],[NUMBER_OF_ROWS],[CRE_DATE],[CRE_BY],[CRE_IP_ADDRESS],[MOD_DATE],[MOD_BY],[MOD_IP_ADDRESS],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[ID]) as [ID],[JOB_TASKLIST_CODE],[STATUS],[START_DATE],[END_DATE],[LOG_DESCRIPTION],[RUN_BY],[FROM_ID],[TO_ID],[NUMBER_OF_ROWS],[CRE_DATE],[CRE_BY],[CRE_IP_ADDRESS],[MOD_DATE],[MOD_BY],[MOD_IP_ADDRESS],'New','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM INSERTED     
			    
			          INSERT INTO [dbo].[Z_AUDIT_SYS_JOB_TASKLIST_LOG]
([ID],[JOB_TASKLIST_CODE],[STATUS],[START_DATE],[END_DATE],[LOG_DESCRIPTION],[RUN_BY],[FROM_ID],[TO_ID],[NUMBER_OF_ROWS],[CRE_DATE],[CRE_BY],[CRE_IP_ADDRESS],[MOD_DATE],[MOD_BY],[MOD_IP_ADDRESS],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[ID]) as [ID],[JOB_TASKLIST_CODE],[STATUS],[START_DATE],[END_DATE],[LOG_DESCRIPTION],[RUN_BY],[FROM_ID],[TO_ID],[NUMBER_OF_ROWS],[CRE_DATE],[CRE_BY],[CRE_IP_ADDRESS],[MOD_DATE],[MOD_BY],[MOD_IP_ADDRESS],'Old','Update',SUSER_SNAME(),getdate(),@UpdatedCols  FROM DELETED  
			   END
GO
    
			CREATE TRIGGER [dbo].[SYS_JOB_TASKLIST_LOG_Delete_Audit]    
			ON [dbo].[SYS_JOB_TASKLIST_LOG]    
			FOR DELETE    
			AS   
  INSERT INTO [dbo].[Z_AUDIT_SYS_JOB_TASKLIST_LOG]
([ID],[JOB_TASKLIST_CODE],[STATUS],[START_DATE],[END_DATE],[LOG_DESCRIPTION],[RUN_BY],[FROM_ID],[TO_ID],[NUMBER_OF_ROWS],[CRE_DATE],[CRE_BY],[CRE_IP_ADDRESS],[MOD_DATE],[MOD_BY],[MOD_IP_ADDRESS],AuditDataState,AuditDMLAction,AuditUser,AuditDateTime,UpdateColumns)
SELECT CONVERT(bigint,[ID]) as [ID],[JOB_TASKLIST_CODE],[STATUS],[START_DATE],[END_DATE],[LOG_DESCRIPTION],[RUN_BY],[FROM_ID],[TO_ID],[NUMBER_OF_ROWS],[CRE_DATE],[CRE_BY],[CRE_IP_ADDRESS],[MOD_DATE],[MOD_BY],[MOD_IP_ADDRESS],'Old','Delete',SUSER_SNAME(),getdate(),''  FROM DELETED
GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'JOB, MANUAL', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'SYS_JOB_TASKLIST_LOG', @level2type = N'COLUMN', @level2name = N'RUN_BY';

